{
  "info": {
    "name": "Financial Services Tests",
    "description": "Tests for validating financial API responses in the MyGov Response Hub",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Mock NRB Forex - Get Latest Exchange Rates",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for basic structure",
              "pm.test(\"Response has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('date');",
              "    pm.expect(jsonData).to.have.property('source');",
              "    pm.expect(jsonData).to.have.property('base_currency');",
              "    pm.expect(jsonData).to.have.property('rates');",
              "    pm.expect(jsonData).to.have.property('last_updated');",
              "    ",
              "    // Check source and base currency",
              "    pm.expect(jsonData.source).to.equal('Nepal Rastra Bank');",
              "    pm.expect(jsonData.base_currency).to.equal('NPR');",
              "});",
              "",
              "// Test for rates structure",
              "pm.test(\"Rates have correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.rates).to.be.an('object');",
              "    ",
              "    // Check for major currencies",
              "    pm.expect(jsonData.rates).to.have.property('USD');",
              "    pm.expect(jsonData.rates).to.have.property('EUR');",
              "    pm.expect(jsonData.rates).to.have.property('GBP');",
              "    pm.expect(jsonData.rates).to.have.property('INR');",
              "    ",
              "    // Check USD rate structure",
              "    pm.expect(jsonData.rates.USD).to.have.property('buy');",
              "    pm.expect(jsonData.rates.USD).to.have.property('sell');",
              "    pm.expect(jsonData.rates.USD.buy).to.be.a('number');",
              "    pm.expect(jsonData.rates.USD.sell).to.be.a('number');",
              "    ",
              "    // Check that sell rate is higher than buy rate",
              "    pm.expect(jsonData.rates.USD.sell).to.be.greaterThan(jsonData.rates.USD.buy);",
              "});",
              "",
              "// Test for date format",
              "pm.test(\"Date format is valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Check date format (YYYY-MM-DD)",
              "    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
              "    pm.expect(jsonData.date).to.match(dateRegex);",
              "    ",
              "    // Check last_updated format (ISO 8601)",
              "    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
              "    pm.expect(jsonData.last_updated).to.match(isoDateRegex);",
              "});",
              "",
              "// Test for schema validation",
              "pm.test(\"Response schema is valid\", function () {",
              "    const schema = {",
              "        \"type\": \"object\",",
              "        \"required\": [\"date\", \"source\", \"base_currency\", \"rates\", \"last_updated\"],",
              "        \"properties\": {",
              "            \"date\": { \"type\": \"string\" },",
              "            \"source\": { \"type\": \"string\" },",
              "            \"base_currency\": { \"type\": \"string\" },",
              "            \"last_updated\": { \"type\": \"string\" },",
              "            \"rates\": {",
              "                \"type\": \"object\",",
              "                \"required\": [\"USD\", \"EUR\", \"GBP\", \"INR\"],",
              "                \"properties\": {",
              "                    \"USD\": {",
              "                        \"type\": \"object\",",
              "                        \"required\": [\"buy\", \"sell\"],",
              "                        \"properties\": {",
              "                            \"buy\": { \"type\": \"number\" },",
              "                            \"sell\": { \"type\": \"number\" }",
              "                        }",
              "                    },",
              "                    \"EUR\": {",
              "                        \"type\": \"object\",",
              "                        \"required\": [\"buy\", \"sell\"],",
              "                        \"properties\": {",
              "                            \"buy\": { \"type\": \"number\" },",
              "                            \"sell\": { \"type\": \"number\" }",
              "                        }",
              "                    },",
              "                    \"GBP\": {",
              "                        \"type\": \"object\",",
              "                        \"required\": [\"buy\", \"sell\"],",
              "                        \"properties\": {",
              "                            \"buy\": { \"type\": \"number\" },",
              "                            \"sell\": { \"type\": \"number\" }",
              "                        }",
              "                    },",
              "                    \"INR\": {",
              "                        \"type\": \"object\",",
              "                        \"required\": [\"buy\", \"sell\"],",
              "                        \"properties\": {",
              "                            \"buy\": { \"type\": \"number\" },",
              "                            \"sell\": { \"type\": \"number\" },",
              "                            \"per\": { \"type\": \"number\" }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    };",
              "    ",
              "    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{mock_server_url}}/finance/forex/latest",
          "host": ["{{mock_server_url}}"],
          "path": ["finance", "forex", "latest"]
        }
      }
    },
    {
      "name": "Yahoo Finance API - Get Stock Chart",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for response time",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for chart structure",
              "pm.test(\"Response has chart structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('chart');",
              "    pm.expect(jsonData.chart).to.be.an('object');",
              "    pm.expect(jsonData.chart).to.have.property('result');",
              "    pm.expect(jsonData.chart.result).to.be.an('array');",
              "});",
              "",
              "// Test for result data",
              "pm.test(\"Chart result contains data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.chart.result.length).to.be.at.least(1);",
              "    ",
              "    const firstResult = jsonData.chart.result[0];",
              "    pm.expect(firstResult).to.have.property('meta');",
              "    pm.expect(firstResult).to.have.property('timestamp');",
              "    pm.expect(firstResult).to.have.property('indicators');",
              "});",
              "",
              "// Test for meta data",
              "pm.test(\"Meta data is correct\", function () {",
              "    const jsonData = pm.response.json();",
              "    const meta = jsonData.chart.result[0].meta;",
              "    ",
              "    pm.expect(meta).to.have.property('currency');",
              "    pm.expect(meta).to.have.property('symbol');",
              "    pm.expect(meta).to.have.property('exchangeName');",
              "    pm.expect(meta).to.have.property('instrumentType');",
              "    pm.expect(meta).to.have.property('timezone');",
              "    ",
              "    // Check symbol matches request",
              "    const symbol = pm.variables.get('symbol') || 'AAPL';",
              "    pm.expect(meta.symbol).to.equal(symbol);",
              "});",
              "",
              "// Test for indicators",
              "pm.test(\"Indicators data is present\", function () {",
              "    const jsonData = pm.response.json();",
              "    const indicators = jsonData.chart.result[0].indicators;",
              "    ",
              "    pm.expect(indicators).to.have.property('quote');",
              "    pm.expect(indicators.quote).to.be.an('array');",
              "    pm.expect(indicators.quote.length).to.be.at.least(1);",
              "    ",
              "    const quote = indicators.quote[0];",
              "    pm.expect(quote).to.have.property('open');",
              "    pm.expect(quote).to.have.property('high');",
              "    pm.expect(quote).to.have.property('low');",
              "    pm.expect(quote).to.have.property('close');",
              "    pm.expect(quote).to.have.property('volume');",
              "    ",
              "    // Check for adjusted close if requested",
              "    if (pm.variables.get('includeAdjustedClose') === 'true') {",
              "        pm.expect(indicators).to.have.property('adjclose');",
              "        pm.expect(indicators.adjclose).to.be.an('array');",
              "        pm.expect(indicators.adjclose.length).to.be.at.least(1);",
              "    }",
              "});",
              "",
              "// Test for timestamp array",
              "pm.test(\"Timestamp data is present\", function () {",
              "    const jsonData = pm.response.json();",
              "    const timestamps = jsonData.chart.result[0].timestamp;",
              "    ",
              "    pm.expect(timestamps).to.be.an('array');",
              "    pm.expect(timestamps.length).to.be.at.least(1);",
              "    ",
              "    // Check that timestamps are in ascending order",
              "    for (let i = 1; i < timestamps.length; i++) {",
              "        pm.expect(timestamps[i]).to.be.greaterThan(timestamps[i-1]);",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{yahoo_finance_api_url}}/get_stock_chart?symbol=AAPL&interval=1d&range=1mo",
          "host": ["{{yahoo_finance_api_url}}"],
          "path": ["get_stock_chart"],
          "query": [
            {
              "key": "symbol",
              "value": "AAPL"
            },
            {
              "key": "interval",
              "value": "1d"
            },
            {
              "key": "range",
              "value": "1mo"
            }
          ]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "mock_server_url",
      "value": "https://mock.mygovresponse.com",
      "type": "string"
    },
    {
      "key": "yahoo_finance_api_url",
      "value": "https://api.example.com/yahoofinance",
      "type": "string"
    },
    {
      "key": "symbol",
      "value": "AAPL",
      "type": "string"
    },
    {
      "key": "includeAdjustedClose",
      "value": "true",
      "type": "string"
    }
  ]
}

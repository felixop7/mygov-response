{
  "info": {
    "name": "Transportation & Maps Tests",
    "description": "Tests for validating transportation and maps API responses in the MyGov Response Hub",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Baato Maps API - Search",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for response time",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for data array in response",
              "pm.test(\"Response contains data array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.be.an('array');",
              "});",
              "",
              "// Test for search results",
              "pm.test(\"Response contains search results\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.length).to.be.at.least(1);",
              "});",
              "",
              "// Test for place data structure",
              "pm.test(\"Place data has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.data.length > 0) {",
              "        const firstPlace = jsonData.data[0];",
              "        pm.expect(firstPlace).to.have.property('name');",
              "        pm.expect(firstPlace).to.have.property('address');",
              "        pm.expect(firstPlace).to.have.property('placeId');",
              "        pm.expect(firstPlace).to.have.property('score');",
              "        pm.expect(firstPlace).to.have.property('centroid');",
              "        ",
              "        // Check centroid structure",
              "        pm.expect(firstPlace.centroid).to.have.property('lat');",
              "        pm.expect(firstPlace.centroid).to.have.property('lon');",
              "        pm.expect(firstPlace.centroid.lat).to.be.a('number');",
              "        pm.expect(firstPlace.centroid.lon).to.be.a('number');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "https://api.baato.io/api/v1/search?key={{baato_api_key}}&q=Kathmandu&limit=10",
          "protocol": "https",
          "host": ["api", "baato", "io"],
          "path": ["api", "v1", "search"],
          "query": [
            {
              "key": "key",
              "value": "{{baato_api_key}}"
            },
            {
              "key": "q",
              "value": "Kathmandu"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      }
    },
    {
      "name": "Baato Maps API - Directions",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for response time",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for data object in response",
              "pm.test(\"Response contains data object\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "});",
              "",
              "// Test for route information",
              "pm.test(\"Response contains route information\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('routes');",
              "    pm.expect(jsonData.data.routes).to.be.an('array');",
              "    pm.expect(jsonData.data.routes.length).to.be.at.least(1);",
              "});",
              "",
              "// Test for route data structure",
              "pm.test(\"Route data has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.data.routes.length > 0) {",
              "        const firstRoute = jsonData.data.routes[0];",
              "        pm.expect(firstRoute).to.have.property('legs');",
              "        pm.expect(firstRoute).to.have.property('weight_name');",
              "        pm.expect(firstRoute).to.have.property('weight');",
              "        pm.expect(firstRoute).to.have.property('duration');",
              "        pm.expect(firstRoute).to.have.property('distance');",
              "        pm.expect(firstRoute).to.have.property('geometry');",
              "        ",
              "        // Check legs structure",
              "        pm.expect(firstRoute.legs).to.be.an('array');",
              "        pm.expect(firstRoute.legs.length).to.be.at.least(1);",
              "        ",
              "        // Check duration and distance",
              "        pm.expect(firstRoute.duration).to.be.a('number');",
              "        pm.expect(firstRoute.distance).to.be.a('number');",
              "    }",
              "});",
              "",
              "// Test for waypoints",
              "pm.test(\"Response contains waypoints\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('waypoints');",
              "    pm.expect(jsonData.data.waypoints).to.be.an('array');",
              "    pm.expect(jsonData.data.waypoints.length).to.be.at.least(2); // At least origin and destination",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "https://api.baato.io/api/v1/directions?key={{baato_api_key}}&points=27.7172,85.3240|27.7000,85.3300&mode=car",
          "protocol": "https",
          "host": ["api", "baato", "io"],
          "path": ["api", "v1", "directions"],
          "query": [
            {
              "key": "key",
              "value": "{{baato_api_key}}"
            },
            {
              "key": "points",
              "value": "27.7172,85.3240|27.7000,85.3300"
            },
            {
              "key": "mode",
              "value": "car"
            }
          ]
        }
      }
    },
    {
      "name": "Mock Transportation - Public Transport Routes",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for routes array in response",
              "pm.test(\"Response contains routes array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('routes');",
              "    pm.expect(jsonData.routes).to.be.an('array');",
              "    pm.expect(jsonData.routes.length).to.be.at.least(1);",
              "});",
              "",
              "// Test for route data structure",
              "pm.test(\"Route data has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.routes.length > 0) {",
              "        const firstRoute = jsonData.routes[0];",
              "        pm.expect(firstRoute).to.have.property('id');",
              "        pm.expect(firstRoute).to.have.property('name');",
              "        pm.expect(firstRoute).to.have.property('type');",
              "        pm.expect(firstRoute).to.have.property('stops');",
              "        pm.expect(firstRoute).to.have.property('schedule');",
              "        pm.expect(firstRoute).to.have.property('fare');",
              "        ",
              "        // Check stops structure",
              "        pm.expect(firstRoute.stops).to.be.an('array');",
              "        pm.expect(firstRoute.stops.length).to.be.at.least(2);",
              "        ",
              "        // Check first stop structure",
              "        const firstStop = firstRoute.stops[0];",
              "        pm.expect(firstStop).to.have.property('name');",
              "        pm.expect(firstStop).to.have.property('coordinates');",
              "        pm.expect(firstStop.coordinates).to.be.an('array');",
              "        pm.expect(firstStop.coordinates.length).to.equal(2);",
              "        ",
              "        // Check fare structure",
              "        pm.expect(firstRoute.fare).to.have.property('min');",
              "        pm.expect(firstRoute.fare).to.have.property('max');",
              "        pm.expect(firstRoute.fare).to.have.property('currency');",
              "    }",
              "});",
              "",
              "// Test for schema validation",
              "pm.test(\"Response schema is valid\", function () {",
              "    const schema = {",
              "        \"type\": \"object\",",
              "        \"required\": [\"routes\"],",
              "        \"properties\": {",
              "            \"routes\": {",
              "                \"type\": \"array\",",
              "                \"items\": {",
              "                    \"type\": \"object\",",
              "                    \"required\": [\"id\", \"name\", \"type\", \"stops\", \"schedule\", \"fare\"],",
              "                    \"properties\": {",
              "                        \"id\": { \"type\": \"string\" },",
              "                        \"name\": { \"type\": \"string\" },",
              "                        \"type\": { \"type\": \"string\" },",
              "                        \"stops\": {",
              "                            \"type\": \"array\",",
              "                            \"items\": {",
              "                                \"type\": \"object\",",
              "                                \"required\": [\"name\", \"coordinates\"],",
              "                                \"properties\": {",
              "                                    \"name\": { \"type\": \"string\" },",
              "                                    \"coordinates\": {",
              "                                        \"type\": \"array\",",
              "                                        \"items\": { \"type\": \"number\" },",
              "                                        \"minItems\": 2,",
              "                                        \"maxItems\": 2",
              "                                    }",
              "                                }",
              "                            }",
              "                        },",
              "                        \"schedule\": {",
              "                            \"type\": \"array\",",
              "                            \"items\": {",
              "                                \"type\": \"object\",",
              "                                \"required\": [\"departure\", \"frequency\", \"last_departure\"],",
              "                                \"properties\": {",
              "                                    \"departure\": { \"type\": \"string\" },",
              "                                    \"frequency\": { \"type\": \"string\" },",
              "                                    \"last_departure\": { \"type\": \"string\" }",
              "                                }",
              "                            }",
              "                        },",
              "                        \"fare\": {",
              "                            \"type\": \"object\",",
              "                            \"required\": [\"min\", \"max\", \"currency\"],",
              "                            \"properties\": {",
              "                                \"min\": { \"type\": \"number\" },",
              "                                \"max\": { \"type\": \"number\" },",
              "                                \"currency\": { \"type\": \"string\" }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    };",
              "    ",
              "    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{mock_server_url}}/transport/routes/kathmandu",
          "host": ["{{mock_server_url}}"],
          "path": ["transport", "routes", "kathmandu"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baato_api_key",
      "value": "your_api_key_here",
      "type": "string"
    },
    {
      "key": "mock_server_url",
      "value": "https://mock.mygovresponse.com",
      "type": "string"
    }
  ]
}

{
  "info": {
    "name": "Utility Services Tests",
    "description": "Tests for validating utility API responses in the MyGov Response Hub",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Mock Electricity - Scheduled Power Cuts",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for basic structure",
              "pm.test(\"Response has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('district');",
              "    pm.expect(jsonData).to.have.property('date');",
              "    pm.expect(jsonData).to.have.property('source');",
              "    pm.expect(jsonData).to.have.property('scheduled_power_cuts');",
              "    pm.expect(jsonData).to.have.property('notes');",
              "    pm.expect(jsonData).to.have.property('last_updated');",
              "    ",
              "    // Check district matches request",
              "    const district = pm.request.url.query.find(param => param.key === 'district').value;",
              "    pm.expect(jsonData.district.toLowerCase()).to.equal(district.toLowerCase());",
              "    ",
              "    // Check date matches request",
              "    const date = pm.request.url.query.find(param => param.key === 'date').value;",
              "    pm.expect(jsonData.date).to.equal(date);",
              "});",
              "",
              "// Test for scheduled power cuts array",
              "pm.test(\"Scheduled power cuts array is present\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.scheduled_power_cuts).to.be.an('array');",
              "    pm.expect(jsonData.scheduled_power_cuts.length).to.be.at.least(1);",
              "});",
              "",
              "// Test for power cut data structure",
              "pm.test(\"Power cut data has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    const firstPowerCut = jsonData.scheduled_power_cuts[0];",
              "    ",
              "    pm.expect(firstPowerCut).to.have.property('id');",
              "    pm.expect(firstPowerCut).to.have.property('area');",
              "    pm.expect(firstPowerCut).to.have.property('group');",
              "    pm.expect(firstPowerCut).to.have.property('start_time');",
              "    pm.expect(firstPowerCut).to.have.property('end_time');",
              "    pm.expect(firstPowerCut).to.have.property('reason');",
              "    pm.expect(firstPowerCut).to.have.property('status');",
              "});",
              "",
              "// Test for time format",
              "pm.test(\"Time format is valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    const firstPowerCut = jsonData.scheduled_power_cuts[0];",
              "    ",
              "    // Check time format (HH:MM)",
              "    const timeRegex = /^([01]\\d|2[0-3]):([0-5]\\d)$/;",
              "    pm.expect(firstPowerCut.start_time).to.match(timeRegex);",
              "    pm.expect(firstPowerCut.end_time).to.match(timeRegex);",
              "    ",
              "    // Check last_updated format (ISO 8601)",
              "    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
              "    pm.expect(jsonData.last_updated).to.match(isoDateRegex);",
              "});",
              "",
              "// Test for schema validation",
              "pm.test(\"Response schema is valid\", function () {",
              "    const schema = {",
              "        \"type\": \"object\",",
              "        \"required\": [\"district\", \"date\", \"source\", \"scheduled_power_cuts\", \"notes\", \"last_updated\"],",
              "        \"properties\": {",
              "            \"district\": { \"type\": \"string\" },",
              "            \"date\": { \"type\": \"string\" },",
              "            \"source\": { \"type\": \"string\" },",
              "            \"notes\": { \"type\": \"string\" },",
              "            \"last_updated\": { \"type\": \"string\" },",
              "            \"scheduled_power_cuts\": {",
              "                \"type\": \"array\",",
              "                \"items\": {",
              "                    \"type\": \"object\",",
              "                    \"required\": [\"id\", \"area\", \"group\", \"start_time\", \"end_time\", \"reason\", \"status\"],",
              "                    \"properties\": {",
              "                        \"id\": { \"type\": \"string\" },",
              "                        \"area\": { \"type\": \"string\" },",
              "                        \"group\": { \"type\": \"string\" },",
              "                        \"start_time\": { \"type\": \"string\" },",
              "                        \"end_time\": { \"type\": \"string\" },",
              "                        \"reason\": { \"type\": \"string\" },",
              "                        \"status\": { \"type\": \"string\" }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    };",
              "    ",
              "    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{mock_server_url}}/utility/electricity/powercuts?district=kathmandu&date=2023-04-17",
          "host": ["{{mock_server_url}}"],
          "path": ["utility", "electricity", "powercuts"],
          "query": [
            {
              "key": "district",
              "value": "kathmandu"
            },
            {
              "key": "date",
              "value": "2023-04-17"
            }
          ]
        }
      }
    },
    {
      "name": "Mock Electricity - Service Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for basic structure",
              "pm.test(\"Response has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('district');",
              "    pm.expect(jsonData).to.have.property('source');",
              "    pm.expect(jsonData).to.have.property('overall_status');",
              "    pm.expect(jsonData).to.have.property('areas');",
              "    pm.expect(jsonData).to.have.property('announcements');",
              "    pm.expect(jsonData).to.have.property('last_updated');",
              "    ",
              "    // Check district matches request",
              "    const district = pm.request.url.query.find(param => param.key === 'district').value;",
              "    pm.expect(jsonData.district.toLowerCase()).to.equal(district.toLowerCase());",
              "});",
              "",
              "// Test for areas array",
              "pm.test(\"Areas array is present\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.areas).to.be.an('array');",
              "    pm.expect(jsonData.areas.length).to.be.at.least(1);",
              "});",
              "",
              "// Test for area data structure",
              "pm.test(\"Area data has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    const firstArea = jsonData.areas[0];",
              "    ",
              "    pm.expect(firstArea).to.have.property('name');",
              "    pm.expect(firstArea).to.have.property('status');",
              "    pm.expect(firstArea).to.have.property('reason');",
              "    pm.expect(firstArea).to.have.property('estimated_restoration');",
              "});",
              "",
              "// Test for status values",
              "pm.test(\"Status values are valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Check overall status is one of the expected values",
              "    const validOverallStatuses = ['Normal', 'Warning', 'Critical'];",
              "    pm.expect(validOverallStatuses).to.include(jsonData.overall_status);",
              "    ",
              "    // Check area statuses are valid",
              "    const validAreaStatuses = ['Normal', 'Warning', 'Outage'];",
              "    jsonData.areas.forEach(area => {",
              "        pm.expect(validAreaStatuses).to.include(area.status);",
              "    });",
              "});",
              "",
              "// Test for announcements array",
              "pm.test(\"Announcements array is present\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.announcements).to.be.an('array');",
              "});",
              "",
              "// Test for schema validation",
              "pm.test(\"Response schema is valid\", function () {",
              "    const schema = {",
              "        \"type\": \"object\",",
              "        \"required\": [\"district\", \"source\", \"overall_status\", \"areas\", \"announcements\", \"last_updated\"],",
              "        \"properties\": {",
              "            \"district\": { \"type\": \"string\" },",
              "            \"source\": { \"type\": \"string\" },",
              "            \"overall_status\": { \"type\": \"string\", \"enum\": [\"Normal\", \"Warning\", \"Critical\"] },",
              "            \"last_updated\": { \"type\": \"string\" },",
              "            \"areas\": {",
              "                \"type\": \"array\",",
              "                \"items\": {",
              "                    \"type\": \"object\",",
              "                    \"required\": [\"name\", \"status\", \"reason\", \"estimated_restoration\"],",
              "                    \"properties\": {",
              "                        \"name\": { \"type\": \"string\" },",
              "                        \"status\": { \"type\": \"string\", \"enum\": [\"Normal\", \"Warning\", \"Outage\"] },",
              "                        \"reason\": { \"type\": [\"string\", \"null\"] },",
              "                        \"estimated_restoration\": { \"type\": [\"string\", \"null\"] }",
              "                    }",
              "                }",
              "            },",
              "            \"announcements\": {",
              "                \"type\": \"array\",",
              "                \"items\": {",
              "                    \"type\": \"object\",",
              "                    \"required\": [\"title\", \"message\", \"date\"],",
              "                    \"properties\": {",
              "                        \"title\": { \"type\": \"string\" },",
              "                        \"message\": { \"type\": \"string\" },",
              "                        \"date\": { \"type\": \"string\" }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    };",
              "    ",
              "    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{mock_server_url}}/utility/electricity/status?district=kathmandu",
          "host": ["{{mock_server_url}}"],
          "path": ["utility", "electricity", "status"],
          "query": [
            {
              "key": "district",
              "value": "kathmandu"
            }
          ]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "mock_server_url",
      "value": "https://mock.mygovresponse.com",
      "type": "string"
    }
  ]
}

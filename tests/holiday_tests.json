{
  "info": {
    "name": "Holiday Services Tests",
    "description": "Tests for validating holiday API responses in the MyGov Response Hub",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Nepal Events API - Get Date Information (AD)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for response time",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for year data in response",
              "pm.test(\"Response contains year data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('2023');",
              "    pm.expect(jsonData['2023']).to.be.an('object');",
              "});",
              "",
              "// Test for month data in response",
              "pm.test(\"Response contains month data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData['2023']).to.have.property('5');",
              "    pm.expect(jsonData['2023']['5']).to.be.an('object');",
              "});",
              "",
              "// Test for day data in response",
              "pm.test(\"Response contains day data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData['2023']['5']).to.have.property('15');",
              "    pm.expect(jsonData['2023']['5']['15']).to.be.an('object');",
              "});",
              "",
              "// Test for date conversion data",
              "pm.test(\"Response contains date conversion data\", function () {",
              "    const jsonData = pm.response.json();",
              "    const dayData = jsonData['2023']['5']['15'];",
              "    ",
              "    pm.expect(dayData).to.have.property('date');",
              "    pm.expect(dayData.date).to.have.property('ad');",
              "    pm.expect(dayData.date).to.have.property('bs');",
              "    ",
              "    // Check AD date",
              "    pm.expect(dayData.date.ad.year).to.equal(2023);",
              "    pm.expect(dayData.date.ad.month).to.equal(5);",
              "    pm.expect(dayData.date.ad.day).to.equal(15);",
              "    ",
              "    // Check BS date exists",
              "    pm.expect(dayData.date.bs.year).to.exist;",
              "    pm.expect(dayData.date.bs.month).to.exist;",
              "    pm.expect(dayData.date.bs.day).to.exist;",
              "});",
              "",
              "// Test for event data",
              "pm.test(\"Response contains event data\", function () {",
              "    const jsonData = pm.response.json();",
              "    const dayData = jsonData['2023']['5']['15'];",
              "    ",
              "    pm.expect(dayData).to.have.property('event');",
              "    pm.expect(dayData.event).to.be.an('array');",
              "});",
              "",
              "// Test for panchangam data",
              "pm.test(\"Response contains panchangam data\", function () {",
              "    const jsonData = pm.response.json();",
              "    const dayData = jsonData['2023']['5']['15'];",
              "    ",
              "    pm.expect(dayData).to.have.property('panchangam');",
              "    pm.expect(dayData.panchangam).to.be.an('array');",
              "});",
              "",
              "// Test for public_holiday flag",
              "pm.test(\"Response contains public_holiday flag\", function () {",
              "    const jsonData = pm.response.json();",
              "    const dayData = jsonData['2023']['5']['15'];",
              "    ",
              "    pm.expect(dayData).to.have.property('public_holiday');",
              "    pm.expect(dayData.public_holiday).to.be.a('boolean');",
              "});",
              "",
              "// Test for tithi data",
              "pm.test(\"Response contains tithi data\", function () {",
              "    const jsonData = pm.response.json();",
              "    const dayData = jsonData['2023']['5']['15'];",
              "    ",
              "    pm.expect(dayData).to.have.property('tithi');",
              "    pm.expect(dayData.tithi).to.be.a('string');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "https://npclapi.casualsnek.eu.org/v2/date/ad/2023-5-15",
          "protocol": "https",
          "host": ["npclapi", "casualsnek", "eu", "org"],
          "path": ["v2", "date", "ad", "2023-5-15"]
        }
      }
    },
    {
      "name": "Nepal Events API - Get Date Range (AD)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for response time",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for year data in response",
              "pm.test(\"Response contains year data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('2023');",
              "    pm.expect(jsonData['2023']).to.be.an('object');",
              "});",
              "",
              "// Test for month data in response",
              "pm.test(\"Response contains month data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData['2023']).to.have.property('1');",
              "    pm.expect(jsonData['2023']['1']).to.be.an('object');",
              "});",
              "",
              "// Test for multiple days in response",
              "pm.test(\"Response contains multiple days\", function () {",
              "    const jsonData = pm.response.json();",
              "    const monthData = jsonData['2023']['1'];",
              "    const dayKeys = Object.keys(monthData);",
              "    ",
              "    // Should have at least 2 days in the range",
              "    pm.expect(dayKeys.length).to.be.at.least(2);",
              "});",
              "",
              "// Test for consistent data structure across days",
              "pm.test(\"Response has consistent data structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    const monthData = jsonData['2023']['1'];",
              "    const dayKeys = Object.keys(monthData);",
              "    ",
              "    // Check first day's structure",
              "    const firstDay = monthData[dayKeys[0]];",
              "    pm.expect(firstDay).to.have.property('date');",
              "    pm.expect(firstDay).to.have.property('event');",
              "    pm.expect(firstDay).to.have.property('panchangam');",
              "    pm.expect(firstDay).to.have.property('public_holiday');",
              "    pm.expect(firstDay).to.have.property('tithi');",
              "    ",
              "    // Check all days have the same structure",
              "    dayKeys.forEach(day => {",
              "        const dayData = monthData[day];",
              "        pm.expect(dayData).to.have.property('date');",
              "        pm.expect(dayData).to.have.property('event');",
              "        pm.expect(dayData).to.have.property('panchangam');",
              "        pm.expect(dayData).to.have.property('public_holiday');",
              "        pm.expect(dayData).to.have.property('tithi');",
              "    });",
              "});",
              "",
              "// Test for at least one public holiday in the range",
              "pm.test(\"Response contains at least one public holiday\", function () {",
              "    const jsonData = pm.response.json();",
              "    const monthData = jsonData['2023']['1'];",
              "    const dayKeys = Object.keys(monthData);",
              "    ",
              "    // Find at least one public holiday",
              "    const hasPublicHoliday = dayKeys.some(day => monthData[day].public_holiday === true);",
              "    pm.expect(hasPublicHoliday).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "https://npclapi.casualsnek.eu.org/v2/range/ad/from/2023-1-1/to/2023-1-31",
          "protocol": "https",
          "host": ["npclapi", "casualsnek", "eu", "org"],
          "path": ["v2", "range", "ad", "from", "2023-1-1", "to", "2023-1-31"]
        }
      }
    },
    {
      "name": "Mock Holiday - Get Holidays (AD)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for year data in response",
              "pm.test(\"Response contains year data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('2023');",
              "    pm.expect(jsonData['2023']).to.be.an('object');",
              "});",
              "",
              "// Test for month data in response",
              "pm.test(\"Response contains month data\", function () {",
              "    const jsonData = pm.response.json();",
              "    const monthKeys = Object.keys(jsonData['2023']);",
              "    pm.expect(monthKeys.length).to.be.at.least(1);",
              "});",
              "",
              "// Test for schema validation",
              "pm.test(\"Response schema is valid\", function () {",
              "    const schema = {",
              "        \"type\": \"object\",",
              "        \"required\": [\"2023\"],",
              "        \"properties\": {",
              "            \"2023\": {",
              "                \"type\": \"object\",",
              "                \"patternProperties\": {",
              "                    \"^[0-9]+$\": {",
              "                        \"type\": \"object\",",
              "                        \"patternProperties\": {",
              "                            \"^[0-9]+$\": {",
              "                                \"type\": \"object\",",
              "                                \"required\": [\"date\", \"event\", \"public_holiday\", \"tithi\"],",
              "                                \"properties\": {",
              "                                    \"date\": {",
              "                                        \"type\": \"object\",",
              "                                        \"required\": [\"ad\", \"bs\"],",
              "                                        \"properties\": {",
              "                                            \"ad\": {",
              "                                                \"type\": \"object\",",
              "                                                \"required\": [\"day\", \"month\", \"year\"],",
              "                                                \"properties\": {",
              "                                                    \"day\": { \"type\": \"integer\" },",
              "                                                    \"month\": { \"type\": \"integer\" },",
              "                                                    \"year\": { \"type\": \"integer\" }",
              "                                                }",
              "                                            },",
              "                                            \"bs\": {",
              "                                                \"type\": \"object\",",
              "                                                \"required\": [\"day\", \"month\", \"year\"],",
              "                                                \"properties\": {",
              "                                                    \"day\": { \"type\": \"integer\" },",
              "                                                    \"month\": { \"type\": \"integer\" },",
              "                                                    \"year\": { \"type\": \"integer\" }",
              "                                                }",
              "                                            }",
              "                                        }",
              "                                    },",
              "                                    \"event\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
              "                                    \"public_holiday\": { \"type\": \"boolean\" },",
              "                                    \"tithi\": { \"type\": \"string\" }",
              "                                }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    };",
              "    ",
              "    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{mock_server_url}}/holidays/ad/2023",
          "host": ["{{mock_server_url}}"],
          "path": ["holidays", "ad", "2023"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "mock_server_url",
      "value": "https://mock.mygovresponse.com",
      "type": "string"
    }
  ]
}

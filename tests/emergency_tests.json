{
  "info": {
    "name": "Emergency Services Tests",
    "description": "Tests for validating emergency API responses in the MyGov Response Hub",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Mock Emergency - Alert Notifications",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for basic structure",
              "pm.test(\"Response has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('district');",
              "    pm.expect(jsonData).to.have.property('source');",
              "    pm.expect(jsonData).to.have.property('alerts');",
              "    pm.expect(jsonData).to.have.property('last_updated');",
              "    ",
              "    // Check district matches request",
              "    const district = pm.request.url.query.find(param => param.key === 'district').value;",
              "    pm.expect(jsonData.district.toLowerCase()).to.equal(district.toLowerCase());",
              "});",
              "",
              "// Test for alerts array",
              "pm.test(\"Alerts array is present\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.alerts).to.be.an('array');",
              "});",
              "",
              "// Test for alert data structure",
              "pm.test(\"Alert data has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Skip test if no alerts are present",
              "    if (jsonData.alerts.length === 0) {",
              "        pm.test.skip(\"No alerts present to test structure\");",
              "        return;",
              "    }",
              "    ",
              "    const firstAlert = jsonData.alerts[0];",
              "    ",
              "    pm.expect(firstAlert).to.have.property('id');",
              "    pm.expect(firstAlert).to.have.property('type');",
              "    pm.expect(firstAlert).to.have.property('severity');",
              "    pm.expect(firstAlert).to.have.property('title');",
              "    pm.expect(firstAlert).to.have.property('description');",
              "    pm.expect(firstAlert).to.have.property('issued_at');",
              "    pm.expect(firstAlert).to.have.property('valid_until');",
              "    pm.expect(firstAlert).to.have.property('affected_areas');",
              "    pm.expect(firstAlert).to.have.property('instructions');",
              "    pm.expect(firstAlert).to.have.property('contact');",
              "    ",
              "    // Check affected_areas is an array",
              "    pm.expect(firstAlert.affected_areas).to.be.an('array');",
              "    ",
              "    // Check contact structure",
              "    pm.expect(firstAlert.contact).to.have.property('phone');",
              "    pm.expect(firstAlert.contact).to.have.property('email');",
              "});",
              "",
              "// Test for severity values",
              "pm.test(\"Severity values are valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Skip test if no alerts are present",
              "    if (jsonData.alerts.length === 0) {",
              "        pm.test.skip(\"No alerts present to test severity\");",
              "        return;",
              "    }",
              "    ",
              "    // Check severity is one of the expected values",
              "    const validSeverities = ['Low', 'Moderate', 'High', 'Severe', 'Extreme'];",
              "    jsonData.alerts.forEach(alert => {",
              "        pm.expect(validSeverities).to.include(alert.severity);",
              "    });",
              "});",
              "",
              "// Test for date format",
              "pm.test(\"Date format is valid\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Skip test if no alerts are present",
              "    if (jsonData.alerts.length === 0) {",
              "        pm.test.skip(\"No alerts present to test date format\");",
              "        return;",
              "    }",
              "    ",
              "    const firstAlert = jsonData.alerts[0];",
              "    ",
              "    // Check date format (ISO 8601)",
              "    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;",
              "    pm.expect(firstAlert.issued_at).to.match(isoDateRegex);",
              "    pm.expect(firstAlert.valid_until).to.match(isoDateRegex);",
              "    pm.expect(jsonData.last_updated).to.match(isoDateRegex);",
              "});",
              "",
              "// Test for schema validation",
              "pm.test(\"Response schema is valid\", function () {",
              "    const schema = {",
              "        \"type\": \"object\",",
              "        \"required\": [\"district\", \"source\", \"alerts\", \"last_updated\"],",
              "        \"properties\": {",
              "            \"district\": { \"type\": \"string\" },",
              "            \"source\": { \"type\": \"string\" },",
              "            \"last_updated\": { \"type\": \"string\" },",
              "            \"alerts\": {",
              "                \"type\": \"array\",",
              "                \"items\": {",
              "                    \"type\": \"object\",",
              "                    \"required\": [\"id\", \"type\", \"severity\", \"title\", \"description\", \"issued_at\", \"valid_until\", \"affected_areas\", \"instructions\", \"contact\"],",
              "                    \"properties\": {",
              "                        \"id\": { \"type\": \"string\" },",
              "                        \"type\": { \"type\": \"string\" },",
              "                        \"severity\": { \"type\": \"string\", \"enum\": [\"Low\", \"Moderate\", \"High\", \"Severe\", \"Extreme\"] },",
              "                        \"title\": { \"type\": \"string\" },",
              "                        \"description\": { \"type\": \"string\" },",
              "                        \"issued_at\": { \"type\": \"string\" },",
              "                        \"valid_until\": { \"type\": \"string\" },",
              "                        \"affected_areas\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
              "                        \"instructions\": { \"type\": \"string\" },",
              "                        \"contact\": {",
              "                            \"type\": \"object\",",
              "                            \"required\": [\"phone\", \"email\"],",
              "                            \"properties\": {",
              "                                \"phone\": { \"type\": \"string\" },",
              "                                \"email\": { \"type\": \"string\" }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    };",
              "    ",
              "    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{mock_server_url}}/emergency/alerts?district=kathmandu",
          "host": ["{{mock_server_url}}"],
          "path": ["emergency", "alerts"],
          "query": [
            {
              "key": "district",
              "value": "kathmandu"
            }
          ]
        }
      }
    },
    {
      "name": "Mock Emergency - Safety Guidelines",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for basic structure",
              "pm.test(\"Response has correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('type');",
              "    pm.expect(jsonData).to.have.property('source');",
              "    pm.expect(jsonData).to.have.property('title');",
              "    pm.expect(jsonData).to.have.property('last_updated');",
              "    pm.expect(jsonData).to.have.property('guidelines');",
              "    pm.expect(jsonData).to.have.property('emergency_contacts');",
              "    pm.expect(jsonData).to.have.property('resources');",
              "    ",
              "    // Check type matches request",
              "    const type = pm.request.url.query.find(param => param.key === 'type').value;",
              "    pm.expect(jsonData.type).to.equal(type);",
              "});",
              "",
              "// Test for guidelines structure",
              "pm.test(\"Guidelines structure is correct\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.guidelines).to.be.an('object');",
              "    pm.expect(jsonData.guidelines).to.have.property('before');",
              "    pm.expect(jsonData.guidelines).to.have.property('during');",
              "    pm.expect(jsonData.guidelines).to.have.property('after');",
              "    ",
              "    // Check that each phase has array of guidelines",
              "    pm.expect(jsonData.guidelines.before).to.be.an('array');",
              "    pm.expect(jsonData.guidelines.during).to.be.an('array');",
              "    pm.expect(jsonData.guidelines.after).to.be.an('array');",
              "    ",
              "    // Check that each phase has at least one guideline",
              "    pm.expect(jsonData.guidelines.before.length).to.be.at.least(1);",
              "    pm.expect(jsonData.guidelines.during.length).to.be.at.least(1);",
              "    pm.expect(jsonData.guidelines.after.length).to.be.at.least(1);",
              "});",
              "",
              "// Test for guideline item structure",
              "pm.test(\"Guideline item structure is correct\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Check structure of first guideline in each phase",
              "    const beforeGuideline = jsonData.guidelines.before[0];",
              "    const duringGuideline = jsonData.guidelines.during[0];",
              "    const afterGuideline = jsonData.guidelines.after[0];",
              "    ",
              "    pm.expect(beforeGuideline).to.have.property('title');",
              "    pm.expect(beforeGuideline).to.have.property('description');",
              "    pm.expect(duringGuideline).to.have.property('title');",
              "    pm.expect(duringGuideline).to.have.property('description');",
              "    pm.expect(afterGuideline).to.have.property('title');",
              "    pm.expect(afterGuideline).to.have.property('description');",
              "});",
              "",
              "// Test for emergency contacts array",
              "pm.test(\"Emergency contacts array is present\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.emergency_contacts).to.be.an('array');",
              "    pm.expect(jsonData.emergency_contacts.length).to.be.at.least(1);",
              "    ",
              "    // Check structure of first contact",
              "    const firstContact = jsonData.emergency_contacts[0];",
              "    pm.expect(firstContact).to.have.property('name');",
              "    pm.expect(firstContact).to.have.property('phone');",
              "});",
              "",
              "// Test for resources array",
              "pm.test(\"Resources array is present\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.resources).to.be.an('array');",
              "    pm.expect(jsonData.resources.length).to.be.at.least(1);",
              "    ",
              "    // Check structure of first resource",
              "    const firstResource = jsonData.resources[0];",
              "    pm.expect(firstResource).to.have.property('title');",
              "    pm.expect(firstResource).to.have.property('url');",
              "});",
              "",
              "// Test for schema validation",
              "pm.test(\"Response schema is valid\", function () {",
              "    const schema = {",
              "        \"type\": \"object\",",
              "        \"required\": [\"type\", \"source\", \"title\", \"last_updated\", \"guidelines\", \"emergency_contacts\", \"resources\"],",
              "        \"properties\": {",
              "            \"type\": { \"type\": \"string\" },",
              "            \"source\": { \"type\": \"string\" },",
              "            \"title\": { \"type\": \"string\" },",
              "            \"last_updated\": { \"type\": \"string\" },",
              "            \"guidelines\": {",
              "                \"type\": \"object\",",
              "                \"required\": [\"before\", \"during\", \"after\"],",
              "                \"properties\": {",
              "                    \"before\": {",
              "                        \"type\": \"array\",",
              "                        \"items\": {",
              "                            \"type\": \"object\",",
              "                            \"required\": [\"title\", \"description\"],",
              "                            \"properties\": {",
              "                                \"title\": { \"type\": \"string\" },",
              "                                \"description\": { \"type\": \"string\" }",
              "                            }",
              "                        }",
              "                    },",
              "                    \"during\": {",
              "                        \"type\": \"array\",",
              "                        \"items\": {",
              "                            \"type\": \"object\",",
              "                            \"required\": [\"title\", \"description\"],",
              "                            \"properties\": {",
              "                                \"title\": { \"type\": \"string\" },",
              "                                \"description\": { \"type\": \"string\" }",
              "                            }",
              "                        }",
              "                    },",
              "                    \"after\": {",
              "                        \"type\": \"array\",",
              "                        \"items\": {",
              "                            \"type\": \"object\",",
              "                            \"required\": [\"title\", \"description\"],",
              "                            \"properties\": {",
              "                                \"title\": { \"type\": \"string\" },",
              "                                \"description\": { \"type\": \"string\" }",
              "                            }",
              "                        }",
              "                    }",
              "                }",
              "            },",
              "            \"emergency_contacts\": {",
              "                \"type\": \"array\",",
              "                \"items\": {",
              "                    \"type\": \"object\",",
              "                    \"required\": [\"name\", \"phone\"],",
              "                    \"properties\": {",
              "                        \"name\": { \"type\": \"string\" },",
              "                        \"phone\": { \"type\": \"string\" }",
              "                    }",
              "                }",
              "            },",
              "            \"resources\": {",
              "                \"type\": \"array\",",
              "                \"items\": {",
              "                    \"type\": \"object\",",
              "                    \"required\": [\"title\", \"url\"],",
              "                    \"properties\": {",
              "                        \"title\": { \"type\": \"string\" },",
              "                        \"url\": { \"type\": \"string\" }",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    };",
              "    ",
              "    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{mock_server_url}}/emergency/guidelines?type=earthquake",
          "host": ["{{mock_server_url}}"],
          "path": ["emergency", "guidelines"],
          "query": [
            {
              "key": "type",
              "value": "earthquake"
            }
          ]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "mock_server_url",
      "value": "https://mock.mygovresponse.com",
      "type": "string"
    }
  ]
}

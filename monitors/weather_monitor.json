{
  "info": {
    "name": "Weather API Monitor",
    "description": "Monitor for checking the health of weather APIs in the MyGov Response Hub",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Monitor Nepal Weather API",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for response time",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for status field in response",
              "pm.test(\"Response has status field\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.equal('true');",
              "});",
              "",
              "// Test for place field in response",
              "pm.test(\"Response has place field\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('place');",
              "    pm.expect(jsonData.place).to.equal('Kathmandu');",
              "});",
              "",
              "// Test for temperature and rain data",
              "pm.test(\"Response has temperature and rain data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('max');",
              "    pm.expect(jsonData).to.have.property('min');",
              "    pm.expect(jsonData).to.have.property('rain');",
              "});",
              "",
              "// Send monitor results to a notification endpoint (mock)",
              "if (pm.response.code !== 200) {",
              "    pm.sendRequest({",
              "        url: pm.variables.get(\"monitor_notification_url\"),",
              "        method: 'POST',",
              "        header: {",
              "            'Content-Type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({",
              "                monitor: 'Weather API Monitor',",
              "                status: 'Failed',",
              "                endpoint: 'Nepal Weather API',",
              "                error: 'API returned status code ' + pm.response.code,",
              "                timestamp: new Date().toISOString()",
              "            })",
              "        }",
              "    });",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "https://nepal-weather-api.herokuapp.com/api/?place=kathmandu",
          "protocol": "https",
          "host": ["nepal-weather-api", "herokuapp", "com"],
          "path": ["api", ""],
          "query": [
            {
              "key": "place",
              "value": "kathmandu"
            }
          ]
        }
      }
    },
    {
      "name": "Monitor Mock Weather API (Fallback)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Test for successful response",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test for JSON content type",
              "pm.test(\"Content-Type is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "// Test for valid JSON response",
              "pm.test(\"Response is valid JSON\", function () {",
              "    pm.response.to.be.json;",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "});",
              "",
              "// Test for status field in response",
              "pm.test(\"Response has status field\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.equal('true');",
              "});",
              "",
              "// Send monitor results to a notification endpoint (mock)",
              "if (pm.response.code !== 200) {",
              "    pm.sendRequest({",
              "        url: pm.variables.get(\"monitor_notification_url\"),",
              "        method: 'POST',",
              "        header: {",
              "            'Content-Type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({",
              "                monitor: 'Weather API Monitor',",
              "                status: 'Failed',",
              "                endpoint: 'Mock Weather API',",
              "                error: 'API returned status code ' + pm.response.code,",
              "                timestamp: new Date().toISOString()",
              "            })",
              "        }",
              "    });",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{mock_server_url}}/weather/kathmandu",
          "host": ["{{mock_server_url}}"],
          "path": ["weather", "kathmandu"]
        }
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for monitoring",
          "pm.variables.set('monitor_timestamp', new Date().toISOString());",
          "",
          "// Log monitor execution",
          "console.log('Executing Weather API Monitor at ' + pm.variables.get('monitor_timestamp'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for the monitor collection",
          "console.log('Completed Weather API Monitor tests at ' + new Date().toISOString());"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "mock_server_url",
      "value": "https://mock.mygovresponse.com",
      "type": "string"
    },
    {
      "key": "monitor_notification_url",
      "value": "https://mock.mygovresponse.com/monitor/notifications",
      "type": "string"
    }
  ]
}
